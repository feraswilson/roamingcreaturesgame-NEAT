package com.swehorison.neuralnetwork.tictactoe;

import com.swehorison.neuralnetwork.genetic.GANN;
import com.swehorison.neuralnetwork.neuralnetwork.NeuralNetwork;

import java.util.Arrays;
import java.util.Scanner;
import java.util.SplittableRandom;

public class TicTacToeAlgorithmExample {
    public static void main(String[] args) {

        NeuralNetwork neuralNetwork = new NeuralNetwork(9, 1, 8, 9);

        GANN gann = new GANN(neuralNetwork, 500000, 0.45, 0.1);


        SplittableRandom random = new SplittableRandom();
        gann.initiatePopulation(100, new double[]{
                        4.604109042967831, 7.6245985008818415, -1.0714093048275366, 4.040429265531984, 2.6678297009685785, 2.353202229592668, -14.929489628786513, 2.472070888937022, -4.475187392414858, 18.450271427739565, 12.49467375988722, -18.620843611845853, 18.40651177873859, -15.726098115241584, 15.746031441021884, 14.908679923543517, 18.367729516556516, 10.318000231917257, -12.58942845647948, 10.048409108978557, -1.365101863076486, -11.738514561324568, 6.034625421522236, 9.086916348355018, -1.584779074312273, 18.62934778189222, 18.256477855208566, 4.756723857757468, -1.0095119442138838, -7.146822660298417, -11.675671312959302, 16.071300905052027, -17.393148921419108, -2.8357648932221835, 10.950939867948588, -10.305554197397168, -15.206967657334221, -2.2509742465712215, -19.155714888168966, 1.8769576722479187, 18.39986894496667, -17.642358235050494, -13.770646085149307, 4.291381456963968, -17.239687600562128, -12.766414101651216, 12.59847178987102, 9.992318317742644, 0.30774768833968835, 8.890791100677333, 6.852209626253057, -5.167498514433703, 7.004931613340091, 6.349675159960324, -2.5154341047210416, 12.909481783593314, 19.864446375882004, 11.644984013509028, -15.108469179545814, -1.090513364676326, 10.534450777838401, 15.649637186833054, -2.289737396343483, 3.5135069413382993, 7.746684120995926, 10.435347869079514, -0.010526081484684369, -0.9893904821780737, -13.473602575177555, 10.83044655767231, -1.2469490406820682, 10.39914306230477, -17.884673488845927, -9.955017352694746, -17.367250693462545, 7.156143375560408, -19.89913695825098, -8.412375066121719, -2.009321126526551, 8.120469437330524, 11.554960216867418, 11.659740217576982, 15.890009855549089, 5.096357458149797, -18.263921710288614, 12.429589111204592, 8.31614891474878, -15.869905027486979, -13.249510888355726, 2.7596928039387834, 16.31644096022599, -11.251178455424105, 7.976471756318627, -14.691109602641593, 15.831776031338286, 8.911280181649069, 2.331514922974659, -4.511744875457202, 4.783871402657823, -2.0308563044672, 0.37723582341392614, 10.424789490535467, 5.387726338892442, 13.632180097084778, -9.016135623707386, 3.6550960903420275, -0.3350764870932892, 1.6447277753945642, 1.752994155808743, 12.053016554655677, 3.2939828052328544, -8.192437011471272, 15.3073451481878, -7.019774730258103, 19.874462898469368, -11.84966644883767, 13.934195074983947, -17.650835856321493, -1.7521036073390732, -17.126341343908354, 10.196601517929793, 18.040941343163517, -16.07938754042395, 0.3587058388793416, -3.156706723347483, -9.395040619764515, 14.469011773407082, -16.47836479609815, 11.67624524938162, -5.857129919991301, 8.264789570596065, 5.6409950577087, 5.700383427721299, 6.455335562076499, 17.17040561740388, -5.765531937478773, -0.3945430663346201, -15.57860052197662, -7.876833402943664, -19.637704433087926, 18.25736894508595, 10.897238789165453, -4.633215397093121, 3.6728659756668804, 2.8601937263980695, -2.4705747502363913, 8.68788246535648, -8.900779547496024, -11.781900836989244, -3.1493789710433084, -1.9835600058602374, 14.833983134702038, 15.897348341580624, -9.702432742109245, 3.9911334238385265, 4.924759222701361, -16.383225517851493, 0.5890377972500715, 0.4197944782967511, 1.5589243975801814, 11.197511551245373,}
                , individual -> {
                    double fitness = 0;


                    int[][][] moves = new int[][][]{
                            // Horizontal
                            new int[][]{new int[]{0, 0}, new int[]{0, 1}, new int[]{0, 2}, new int[]{1, 2}, new int[]{2, 2}},
                            new int[][]{new int[]{1, 0}, new int[]{1, 1}, new int[]{1, 2}, new int[]{0, 2}, new int[]{2, 2}},
                            new int[][]{new int[]{2, 0}, new int[]{2, 1}, new int[]{2, 2}, new int[]{0, 2}, new int[]{1, 2}},

                            // Diagonal
                            new int[][]{new int[]{0, 0}, new int[]{1, 1}, new int[]{2, 2}, new int[]{2, 0}, new int[]{2, 1}},
                            new int[][]{new int[]{0, 2}, new int[]{1, 1}, new int[]{2, 0}, new int[]{2, 2}, new int[]{2, 1}},

                            // Vertical
                            new int[][]{new int[]{0, 0}, new int[]{1, 0}, new int[]{2, 0}, new int[]{0, 1}, new int[]{0, 2}},
                            new int[][]{new int[]{0, 1}, new int[]{1, 1}, new int[]{2, 1}, new int[]{0, 2}, new int[]{0, 0}},
                            new int[][]{new int[]{0, 2}, new int[]{1, 2}, new int[]{2, 2}, new int[]{0, 0}, new int[]{0, 1}}
                    };
                    for (int game = 0; game < 8; game++) {
                        TicTacToe ticTacToe = new TicTacToe();


                        for (int i = 0; i < 6; i++) {


                            int x = -1;
                            int y = -1;
                            x = random.nextInt(3);
                            y = random.nextInt(3);
                            while (!ticTacToe.isPlaceAvailable(x, y)) {
                                x = random.nextInt(3);
                                y = random.nextInt(3);
                            }
                            if (ticTacToe.placeTick(x, y, 0) != -1) {
                                fitness -= 5;
                            }


                            int[][] board = ticTacToe.getBoard().getBoard();
                            double[] inputs = new double[]{
                                    board[0][0],
                                    board[0][1],
                                    board[0][2],

                                    board[1][0],
                                    board[1][1],
                                    board[1][2],

                                    board[2][0],
                                    board[2][1],
                                    board[2][2],
                            };
                            double[] output = gann.run(individual.getGenes(), inputs);

                            int max = -1;
                            double maxValue = -1;
                            for (int m = 0; m < output.length; m++) {
                                if (output[m] > maxValue) {
                                    max = m;
                                    maxValue = output[m];
                                }
                            }

                            int row = max / 3;
                            int col = max % 3;

                            if (ticTacToe.isPlaceAvailable(col, row)) {
                                if (ticTacToe.placeTick(col, row, 1) == 1) {
                                    fitness += 1 - (i * 0.2);
                                    break;
                                }
                            }


                        }
                    }
                    return fitness;
                });

        new Thread(new Runnable() {
            @Override
            public void run() {
                int i = 0;
                int generationDifference = 0;

                while (i < 100) {
                    System.out.println("Generation: " + gann.getCurrentGeneration() + " Best Fitness: " + gann.getBestFitness());
                    generationDifference = gann.getCurrentGeneration();
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                    i++;

                }
            }
        }).start();

        gann.train();


        double[] genes = gann.getCurrentPopulation().getFittest().getGenes();
        System.out.println("new double[] {");
        for (int i = 0; i < genes.length; i++) {
            System.out.print(genes[i] + ",");
        }
        System.out.print("}");


        System.out.println();
        System.out.println("Fittest: " + gann.getCurrentPopulation().getFittest().getFitness());
        System.out.println(Arrays.toString(gann.run(genes, new double[]{-1, -1, -1, -1, -1, -1, -1, -1, -1})));

        TicTacToe ticTacToe = new TicTacToe();

        for (int i = 0; i < 5; i++) {
            System.out.println(ticTacToe);
            int x = random.nextInt(3);
            int y = random.nextInt(3);
            while (!ticTacToe.isPlaceAvailable(x, y)) {
                x = random.nextInt(3);
                y = random.nextInt(3);
            }

            if (ticTacToe.placeTick(x, y, 0) != -1) {
                System.out.println("Computer won!");
                System.out.println(ticTacToe);
                break;
            }

            System.out.println(ticTacToe);

            Scanner scanner = new Scanner(System.in);
            int posX = Integer.parseInt(scanner.nextLine());
            int posY = Integer.parseInt(scanner.nextLine());

            if (ticTacToe.placeTick(posX, posY, 1) == 1) {
                System.out.println("You won!");

                System.out.println(ticTacToe);
                break;
            }

        }


        System.out.println();

        // new double[] { -8.592830758043299,-17.27466069180793,-15.352649550860624,-19.807554228000974,-12.235539159455634,-14.733803452588411,12.724911984488003,6.8366526111528785,-7.532007597560781,4.146350414696709,-7.773569680941694,-0.7668240752507742,8.719583134659068,-12.950373906330558,0.7395988382139542,-14.541193904817199,-19.40132350956086,4.427175252624437,-9.208184654931193,18.173989864457276,-15.365326432198039,11.602285979939381,-19.802730800366305,0.21120817681568127,-19.90798826500598,-8.460470275929577,-17.185296497464,4.270462018380879,14.990804356480837,0.3333645192176071,-17.898165113291373,-17.76446919372434,-4.416182193398498,18.193350763813562,-6.752677336977211,11.166359147011082,-9.903655952706494,6.971179928019147,12.347986392781046,-11.280806803093256,18.839975352059042,5.582641959620304,11.088053104939178,-14.93127793239466,0.8928713825143184,4.998654920190258,-0.9167163681979531,11.627771909555783,1.917842521712565,-0.25540469946918165,8.302479021234177,-8.920974907797028,-2.4353729556638406,1.067519358505919,16.70185966840949,-16.74574635226106,-18.840623705347063,4.561613632630621,12.135324551712507,2.069841784416866,-0.7671888719055033,9.810653403426123,-1.4411348094147272,-8.785146561602497,-19.975346053249552,19.448559075632126,-0.7469582425047321,-18.633917974361182,17.2935118123413,-9.199884245164704,13.156392788867407,-6.661148361459519,15.484849823822152,-4.618733132092121,6.76712623482689,-10.508571637488998,-4.413664027097344,-9.51795960523986,-12.354912917974712,19.37946955572007,2.789949292013393,-15.059874925792709,-19.02450388643656,-3.637314784801738,0.5822813135289735,-1.3912650176070365,14.948739462269003,15.708476737319387,-14.775878037082443,17.138313512886327,15.944870633038846,10.355181454301889,-3.7893516578164252,-5.062378720069024,12.792142029013249,-7.8947023056018715,-19.73102122717591,18.89225489496232,-19.799929057461508,16.242239043177506,-2.990140888262456,17.051123933826254,19.056800251659595,10.556940690938362,1.022947085003274,10.93193510520761,-10.200631419964683,-8.206889057658092,-6.414388078858838,-19.093603383909393,-19.843286814055645,-7.450223491576843,11.531842140322425,-0.3965471823483888,-19.215480940427074,1.1433361428862838,-14.73568647903372,-0.7232182760934407,5.971403784647723,6.779725726612142,5.755881456488016,13.795737892862327,12.626737075709947}

        // new double[] {
        //-2.4251105501339936,-16.34571160999521,-12.98425116711357,16.22135990858554,-1.9461538940576126,-19.174931738289786,13.361536870002922,13.130612971863926,1.9415832664887525,-3.72413459999866,13.314476822794369,-5.93204094881003,7.619394079395882,-18.548771395017866,2.755667533140329,-2.19324007826129,7.615231023082465,10.59717492549252,-2.0352824403153704,-10.689373677411705,3.935703879006958,12.4171563867217,-5.060891245516341,0.6231490556033528,-14.107722035108768,-3.743766879833643,6.926914435890659,-4.133143112718773,-10.505826457345112,-10.42669663224106,3.6485964125076293,19.016370047370224,-7.093449170013049,6.270131972541396,-3.5116455005662033,18.571779034623923,-12.49458141612096,-6.605682612054737,1.8464286792029583,-17.622923329894356,2.412380382833966,-6.417112338787625,17.143271716828863,-2.67551345656436,2.0860270570425783,3.871680571162031,4.4199485288287335,-11.188716010708436,-5.170356639737568,-18.994879489567772,-18.741632273932183,-1.015865659608302,12.924589278502687,9.252886941888036,-8.689121229800016,7.15017615016005,15.166020906264698,0.5153584518690764,1.4153074039531077,-15.482763425787237,6.123121262999426,-0.9739681430024163,-7.97227598572098,10.491022409415521,-7.893443015099283,-4.5224880816383894,-17.77507748425229,5.222322961312628,11.909983920769704,-10.25401544556098,2.079682755312149,12.826964386319652,16.416609907491136,-19.633132044635797,5.092459591353233,-10.979507680966382,-9.594741633941837,-13.198864342564436,9.516265978405045,12.534475318487544,2.4227379301612615,6.571075781994637,-3.6699036677366053,5.109084919587584,-6.107377600354509,-1.034978507352534,-19.311680418935282,13.838669162442706,-1.1365018823902382,16.83820350212131,-16.260489016831166,12.366670176176115,5.561949885557773,1.2932059329520804,1.5752021313428308,-15.575233949770793,12.562005739971731,14.778978119553727,5.288397607064329,4.6827942986970506,-8.89683158203705,-2.1191078453004977,5.368615906205399,3.6044486683050323,-12.848582676433583,-0.7908640330910401,18.39705823513998,5.228023923617865,-3.5969021659074087,5.405234305236441,-11.685605809521459,9.671644073755715,-9.891597600165891,-17.625934240129062,19.479569984877905,-15.379638088167011,-7.950411305467124,-7.141075045080445,7.080365741563426,-5.333688583207682,-15.04407207704487,-8.596987283495686,-17.105189251476567,}
    }
}
