package tictactoe;

import genetic.FitnessFunction;
import genetic.GANN;
import genetic.Individual;
import neuralnetwork.NeuralNetwork;

import java.util.Arrays;
import java.util.Scanner;
import java.util.SplittableRandom;

public class TicTacToeAlgorithmExample {
    public static void main(String[] args) {

        NeuralNetwork neuralNetwork = new NeuralNetwork(9, 1, 8, 9);

        GANN gann = new GANN(neuralNetwork, 100, 0.3, 0.03);


        SplittableRandom random = new SplittableRandom();
        gann.initiatePopulation(100, new double[]{
                        -3.5032331197000843, -2.4041273482636996, -7.534686920973019, -1.6848167484599266, -0.3405585249447185, -7.836044797539387, 11.197466783943408, 6.715266829528982, 10.85138166897557, 9.208167321401945, -13.875675918555679, 11.515700673671212, 13.67291681688424, -16.650998708101046, -9.203431105637401, 4.718030737119818, 19.741934035821906, -1.7853854636640634, -10.864982562919867, 11.543398747398953, -12.871512547474211, -12.327516768014197, -1.4349574025811087, -2.1990927163779297, 18.861398440916282, -2.723303663414704, 11.941966271844091, 2.974231039082227, -4.69631964135246, -1.9837589369697675, -12.653133077953104, 4.332769596727815, 15.280719827521537, -11.80119791591491, -19.112221363117165, -16.686034053064468, 18.718237794577178, -16.10982558420931, -10.772033653989133, -19.973536520653653, 19.82897701208224, -19.780499873178155, -8.873027045739743, 2.85974951277489, -9.431186616818557, 6.003694629317941, 5.325357493202116, -7.901620626855777, -16.543703785285416, -9.398640343075535, -15.839154083015782, -5.194885629168953, 10.710361898856025, 11.812103653669904, 15.254859254560515, -5.105806305745993, -13.010701889879215, -2.3184789087782782, 11.20264249631077, -11.71729462987484, -13.65818697999163, 12.057336884097097, 17.12197195424895, -5.619558777072587, -0.5302159363226266, -12.80160033252101, 16.943359928094388, -19.239979464401568, -14.923175910967181, -10.200991272111262, 10.152134162170064, 14.781770710829598, 8.991939262787447, -0.5772942381519464, -13.896922379408096, 0.7770208296871033, -4.901385828766658, -14.715809215683446, -0.2912660742086004, -18.118366254287718, -7.8342436132690185, 12.354504185188091, 6.385193586823547, 10.79960334825753, -12.584082348359612, -10.391250626905597, 9.794570948482956, -2.342546172941667, 6.55103285453454, -1.1543526778887383, 13.493572171981896, 4.41052031578014, -16.2517124079022, 8.871173308203488, -14.922822521958704, -1.3516337020853477, -0.10480524416807668, 3.513003696978746, -17.444000272592497, -14.87077370878942, 4.196434689299696, -7.262012717804382, 18.284533856240266, 13.152428444742242, 2.131582488695013, 6.5195030576437, -10.539369567258356, 6.680387646376136, 13.073573207531815, 14.431258215670837, 17.747565431462093, -0.11362992052174192, -14.977927579752016, -16.408947419378695, -6.4269482688428905, -15.185583043670187, -5.122583964034627, 16.23610061443386, -11.644264241789353, -7.800817062319659, -18.09013004504836, -10.368354802711458, 19.65505320891438, 9.063740045016441, 4.497503884897199, 10.895401202454892, -11.910801371473863, 18.677741896437176, 11.762864647054418, -17.23597228421534, -1.2732012425499128, -10.961544968519373, 17.229885811186442, -13.166104587264318, -6.469873734580208, -19.306599265283115, -10.650978578230461, -3.1044979366628738, 9.600773302886473, 8.701024240977059, 8.90273718473249, 9.186226873904822, -10.69088239828957, 1.2308575417938847, -18.383607085258202, 2.2588238971421006, -1.5965438551083153, -17.49357885908273, 18.798674653162493, -17.46268571237242, -16.826249136326844, 12.232916114775968, -9.696257413783576, -13.56519371144477, -13.573635641968309, 7.516324571144395, 17.23198043153569, -9.353151724579707, -1.1876608580063532, 11.452714380329958, 6.636828191651389,}
                , new FitnessFunction() {
                    @Override
                    public double calculate(Individual individual) {
                        double fitness = 0;

                        for (int game = 0; game < 5000; game++) {
                            TicTacToe ticTacToe = new TicTacToe();


                            for (int i = 0; i < 6; i++) {

                                int x = random.nextInt(3);
                                int y = random.nextInt(3);
                                while (!ticTacToe.isPlaceAvailable(x, y)) {
                                    x = random.nextInt(3);
                                    y = random.nextInt(3);
                                }

                                if (ticTacToe.placeTick(x, y, 0) != -1) {
                                    fitness -= -10;
                                    break;
                                }


                                int[][] board = ticTacToe.getBoard().getBoard();
                                double[] inputs = new double[]{
                                        board[0][0],
                                        board[0][1],
                                        board[0][2],

                                        board[1][0],
                                        board[1][1],
                                        board[1][2],

                                        board[2][0],
                                        board[2][1],
                                        board[2][2],
                                };
                                double[] output = gann.run(individual.getGenes(), inputs);

                                int max = -1;
                                double maxValue = -1;
                                for (int m = 0; m < output.length; m++) {
                                    if (output[m] > maxValue) {
                                        max = m;
                                        maxValue = output[m];
                                    }
                                }

                                int row = max / 3;
                                int col = max % 3;

                                if (ticTacToe.isPlaceAvailable(col, row)) {
                                    if (ticTacToe.placeTick(col, row, 1) == 1) {
                                        fitness += 1;
                                        break;
                                    }
                                } else {

                                    break;
                                }


                                fitness -= 0.1 + i;


                            }
                        }
                        return fitness;
                    }
                });


/*        new Thread(new Runnable() {
            @Override
            public void run() {
                int i = 0;
                while (i < 10) {
                    System.out.println("Generation: " + gann.getCurrentGeneration() + " Best Fitness: " + gann.getBestFitness());
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                    i++;

                }
            }
        }).start();

        gann.train();*/


        double[] genes = gann.getCurrentPopulation().getFittest().getGenes();
        System.out.println("new double[] {");
        for (int i = 0; i < genes.length; i++) {
            System.out.print(genes[i] + ",");
        }
        System.out.print("}");


        System.out.println();
        System.out.println("Fittest: " + gann.getCurrentPopulation().getFittest().getFitness());
        System.out.println(Arrays.toString(gann.run(genes, new double[]{-1, -1, -1, -1, -1, -1, -1, -1, -1})));

        TicTacToe ticTacToe = new TicTacToe();

        for (int i = 0; i < 5; i++) {
            System.out.println(ticTacToe);
            int x = random.nextInt(3);
            int y = random.nextInt(3);
            while (!ticTacToe.isPlaceAvailable(x, y)) {
                x = random.nextInt(3);
                y = random.nextInt(3);
            }

            if (ticTacToe.placeTick(x, y, 0) != -1) {
                System.out.println("Computer won!");
                System.out.println(ticTacToe);
                break;
            }

            System.out.println(ticTacToe);

            Scanner scanner = new Scanner(System.in);
            int posX = Integer.parseInt(scanner.nextLine());
            int posY = Integer.parseInt(scanner.nextLine());

            if (ticTacToe.placeTick(posX, posY, 1) == 1) {
                System.out.println("You won!");

                System.out.println(ticTacToe);
                break;
            }

        }


        System.out.println();

        // new double[] { -8.592830758043299,-17.27466069180793,-15.352649550860624,-19.807554228000974,-12.235539159455634,-14.733803452588411,12.724911984488003,6.8366526111528785,-7.532007597560781,4.146350414696709,-7.773569680941694,-0.7668240752507742,8.719583134659068,-12.950373906330558,0.7395988382139542,-14.541193904817199,-19.40132350956086,4.427175252624437,-9.208184654931193,18.173989864457276,-15.365326432198039,11.602285979939381,-19.802730800366305,0.21120817681568127,-19.90798826500598,-8.460470275929577,-17.185296497464,4.270462018380879,14.990804356480837,0.3333645192176071,-17.898165113291373,-17.76446919372434,-4.416182193398498,18.193350763813562,-6.752677336977211,11.166359147011082,-9.903655952706494,6.971179928019147,12.347986392781046,-11.280806803093256,18.839975352059042,5.582641959620304,11.088053104939178,-14.93127793239466,0.8928713825143184,4.998654920190258,-0.9167163681979531,11.627771909555783,1.917842521712565,-0.25540469946918165,8.302479021234177,-8.920974907797028,-2.4353729556638406,1.067519358505919,16.70185966840949,-16.74574635226106,-18.840623705347063,4.561613632630621,12.135324551712507,2.069841784416866,-0.7671888719055033,9.810653403426123,-1.4411348094147272,-8.785146561602497,-19.975346053249552,19.448559075632126,-0.7469582425047321,-18.633917974361182,17.2935118123413,-9.199884245164704,13.156392788867407,-6.661148361459519,15.484849823822152,-4.618733132092121,6.76712623482689,-10.508571637488998,-4.413664027097344,-9.51795960523986,-12.354912917974712,19.37946955572007,2.789949292013393,-15.059874925792709,-19.02450388643656,-3.637314784801738,0.5822813135289735,-1.3912650176070365,14.948739462269003,15.708476737319387,-14.775878037082443,17.138313512886327,15.944870633038846,10.355181454301889,-3.7893516578164252,-5.062378720069024,12.792142029013249,-7.8947023056018715,-19.73102122717591,18.89225489496232,-19.799929057461508,16.242239043177506,-2.990140888262456,17.051123933826254,19.056800251659595,10.556940690938362,1.022947085003274,10.93193510520761,-10.200631419964683,-8.206889057658092,-6.414388078858838,-19.093603383909393,-19.843286814055645,-7.450223491576843,11.531842140322425,-0.3965471823483888,-19.215480940427074,1.1433361428862838,-14.73568647903372,-0.7232182760934407,5.971403784647723,6.779725726612142,5.755881456488016,13.795737892862327,12.626737075709947}

        // new double[] {
        //-2.4251105501339936,-16.34571160999521,-12.98425116711357,16.22135990858554,-1.9461538940576126,-19.174931738289786,13.361536870002922,13.130612971863926,1.9415832664887525,-3.72413459999866,13.314476822794369,-5.93204094881003,7.619394079395882,-18.548771395017866,2.755667533140329,-2.19324007826129,7.615231023082465,10.59717492549252,-2.0352824403153704,-10.689373677411705,3.935703879006958,12.4171563867217,-5.060891245516341,0.6231490556033528,-14.107722035108768,-3.743766879833643,6.926914435890659,-4.133143112718773,-10.505826457345112,-10.42669663224106,3.6485964125076293,19.016370047370224,-7.093449170013049,6.270131972541396,-3.5116455005662033,18.571779034623923,-12.49458141612096,-6.605682612054737,1.8464286792029583,-17.622923329894356,2.412380382833966,-6.417112338787625,17.143271716828863,-2.67551345656436,2.0860270570425783,3.871680571162031,4.4199485288287335,-11.188716010708436,-5.170356639737568,-18.994879489567772,-18.741632273932183,-1.015865659608302,12.924589278502687,9.252886941888036,-8.689121229800016,7.15017615016005,15.166020906264698,0.5153584518690764,1.4153074039531077,-15.482763425787237,6.123121262999426,-0.9739681430024163,-7.97227598572098,10.491022409415521,-7.893443015099283,-4.5224880816383894,-17.77507748425229,5.222322961312628,11.909983920769704,-10.25401544556098,2.079682755312149,12.826964386319652,16.416609907491136,-19.633132044635797,5.092459591353233,-10.979507680966382,-9.594741633941837,-13.198864342564436,9.516265978405045,12.534475318487544,2.4227379301612615,6.571075781994637,-3.6699036677366053,5.109084919587584,-6.107377600354509,-1.034978507352534,-19.311680418935282,13.838669162442706,-1.1365018823902382,16.83820350212131,-16.260489016831166,12.366670176176115,5.561949885557773,1.2932059329520804,1.5752021313428308,-15.575233949770793,12.562005739971731,14.778978119553727,5.288397607064329,4.6827942986970506,-8.89683158203705,-2.1191078453004977,5.368615906205399,3.6044486683050323,-12.848582676433583,-0.7908640330910401,18.39705823513998,5.228023923617865,-3.5969021659074087,5.405234305236441,-11.685605809521459,9.671644073755715,-9.891597600165891,-17.625934240129062,19.479569984877905,-15.379638088167011,-7.950411305467124,-7.141075045080445,7.080365741563426,-5.333688583207682,-15.04407207704487,-8.596987283495686,-17.105189251476567,}
    }
}
